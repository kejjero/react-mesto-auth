{"ast":null,"code":"class API {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._url = baseUrl;\n    this._headers = headers;\n  } // обработка запроса\n\n\n  _makeRequest(promise) {\n    return promise.then(res => {\n      if (res.ok) {\n        return res.json();\n      }\n\n      throw 'Ошибка запроса';\n    }).then(cards => {\n      return cards;\n    });\n  } // получить карточки\n\n\n  getCards() {\n    const promise = fetch(`${this._url}/cards`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    return this._makeRequest(promise);\n  } // отправить карточку\n\n\n  sendCard(name, link) {\n    const promise = fetch(`${this._url}/cards`, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    });\n    return this._makeRequest(promise);\n  } // Получить профиль пользователя\n\n\n  getProfile() {\n    const promise = fetch(`${this._url}/users/me`, {\n      method: 'GET',\n      headers: this._headers\n    });\n    return this._makeRequest(promise);\n  } // Редактировать профиль пользователя\n\n\n  editProfile(name, about) {\n    const promise = fetch(`${this._url}/users/me`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    });\n    return this._makeRequest(promise);\n  } // Редактировать аватар\n\n\n  editAvatar(avatar) {\n    const promise = fetch(`${this._url}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar\n      })\n    });\n    return this._makeRequest(promise);\n  } // Добавить лайк\n\n\n  addLike(id) {\n    const promise = fetch(`${this._url}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    });\n    return this._makeRequest(promise);\n  } // Удалить лайк\n\n\n  deleteLike(id) {\n    const promise = fetch(`${this._url}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    return this._makeRequest(promise);\n  } // Удалить карточку\n\n\n  deleteCard(id) {\n    const promise = fetch(`${this._url}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n    return this._makeRequest(promise);\n  }\n\n} // Экземпляр класса Api\n\n\nexport const api = new API({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-38',\n  headers: {\n    authorization: '6550da10-2d55-4388-86e4-3d7ab266355b',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"sources":["/Users/kejero/mesto-react/src/utils/api.js"],"names":["API","constructor","baseUrl","headers","_url","_headers","_makeRequest","promise","then","res","ok","json","cards","getCards","fetch","method","sendCard","name","link","body","JSON","stringify","getProfile","editProfile","about","editAvatar","avatar","addLike","id","deleteLike","deleteCard","api","authorization"],"mappings":"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","sourcesContent":["\nclass API {\n    constructor( { baseUrl, headers } ) {\n        this._url = baseUrl;\n        this._headers = headers;\n    }\n\n    // обработка запроса\n    _makeRequest(promise) {\n        return promise.then((res) => {\n            if(res.ok) {\n                return res.json();\n            }\n            throw 'Ошибка запроса'\n        })\n            .then((cards) => {\n                return cards;\n            })\n    }\n\n    // получить карточки\n    getCards() {\n        const promise = fetch(`${this._url}/cards`, {\n            method: 'GET',\n            headers: this._headers,\n        });\n        return this._makeRequest(promise)\n    }\n\n    // отправить карточку\n    sendCard(name, link) {\n        const promise = fetch(`${this._url}/cards`, {\n            method: 'POST',\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                link\n            })\n        });\n        return this._makeRequest(promise)\n    }\n\n    // Получить профиль пользователя\n    getProfile() {\n        const promise = fetch(`${this._url}/users/me`, {\n            method: 'GET',\n            headers: this._headers,\n        });\n        return this._makeRequest(promise)\n    }\n\n    // Редактировать профиль пользователя\n    editProfile(name, about) {\n        const promise = fetch(`${this._url}/users/me`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                name,\n                about\n            })\n        });\n        return this._makeRequest(promise)\n    }\n\n    // Редактировать аватар\n    editAvatar(avatar) {\n        const promise = fetch(`${this._url}/users/me/avatar`, {\n            method: 'PATCH',\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar\n            })\n        });\n        return this._makeRequest(promise)\n    }\n\n    // Добавить лайк\n    addLike(id) {\n        const promise = fetch(`${this._url}/cards/${id}/likes`, {\n            method: 'PUT',\n            headers: this._headers,\n        })\n        return this._makeRequest(promise)\n    }\n\n    // Удалить лайк\n    deleteLike(id) {\n        const promise = fetch(`${this._url}/cards/${id}/likes`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n        return this._makeRequest(promise)\n    }\n\n    // Удалить карточку\n    deleteCard(id) {\n        const promise = fetch(`${this._url}/cards/${id}`, {\n            method: 'DELETE',\n            headers: this._headers,\n        })\n        return this._makeRequest(promise)\n    }\n}\n\n// Экземпляр класса Api\nexport const api = new API({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-38',\n    headers: {\n        authorization:\n            '6550da10-2d55-4388-86e4-3d7ab266355b',\n        'Content-Type': 'application/json'\n    }\n});\n\nexport default api;"]},"metadata":{},"sourceType":"module"}